### EXPORT IDEMPOTENCE ###

- vars:
    os_migrate_projects_filter:
      - regex: '^osm_'

  ansible.builtin.include_role:
    name: os_migrate.os_migrate.export_projects
- name: re-load project_resources for idempotency test
  ansible.builtin.set_fact:
    project_resources_idem: "{{ (lookup('file', os_migrate_data_dir + '/projects.yml') | from_yaml) ['resources'] }}"

- name: verify that export file did not change
  ansible.builtin.assert:
    that:
      - project_resources_idem == project_resources
    fail_msg: |
      project_resources_idem:
      {{ project_resources_idem | to_nice_yaml }}
      project_resources:
      {{ project_resources | to_nice_yaml }}

### IMPORT IDEMPOTENCE ###

- name: look up osm_project dst cloud
  register: project_import_idem_before

  openstack.cloud.project_info:
    auth: "{{ os_migrate_dst_auth }}"
    filters:
      name: osm_project
- ansible.builtin.include_role:
    name: os_migrate.os_migrate.import_projects

- name: look up osm_project in dst cloud again
  register: project_import_idem_after

  openstack.cloud.project_info:
    auth: "{{ os_migrate_dst_auth }}"
    filters:
      name: osm_project
- name: ensure is_enabled for osm_project did not change
  ansible.builtin.assert:
    that:
      - project_import_idem_before['openstack_projects'][0].is_enabled != None
      - "project_import_idem_before['openstack_projects'][0]['is_enabled'] == project_import_idem_after['openstack_projects'][0]['is_enabled']"
    fail_msg: |
      project_import_idem_before is_enabled:
      {{ project_import_idem_before['openstack_projects'][0].is_enabled }}
      project_import_idem_after is_enabled:
      {{ project_import_idem_after['openstack_projects'][0].is_enabled }}
