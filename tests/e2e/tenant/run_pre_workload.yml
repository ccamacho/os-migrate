# FIXME: Find a way we can test the whole playbook rather than just
# the role. Either make sure we're not in a play here and use
# import_playbook, or spawn an ansible-playbook subprocess? The latter
# might be actually a more precise way to test the real end-user
# experience.

- name: Network tasks
  block:
    - vars:
      # This expression should export all osm_ workloads
      # skipping the universal conversion host (osm_uch)
      # which is used to move the VM's.
      # We create it on in seed.yml but we dont export it.
        os_migrate_networks_filter:
          - regex: '^osm_(?!uch)'

      ansible.builtin.include_role:
        name: os_migrate.os_migrate.export_networks
    - name: load exported data
      ansible.builtin.set_fact:
        resources: "{{ (lookup('file', os_migrate_data_dir + '/networks.yml') |\
          \ from_yaml) ['resources'] }}"

    - name: verify data contents
      ansible.builtin.assert:
        that:
          - (resources | community.general.json_query("[?params.name == 'osm_net'].params.name") ==
            ['osm_net'])

    - ansible.builtin.include_role:
        name: os_migrate.os_migrate.import_networks

- name: Subnet tasks
  block:
    - vars:
      # This expression should export all osm_ workloads
      # skipping the universal conversion host (osm_uch)
      # which is used to move the VM's.
      # We create it on in seed.yml but we dont export it.
        os_migrate_subnets_filter:
          - regex: '^osm_(?!uch)'

      ansible.builtin.include_role:
        name: os_migrate.os_migrate.export_subnets
    - name: load exported data
      ansible.builtin.set_fact:
        subnet_resources: "{{ (lookup('file', os_migrate_data_dir + '/subnets.yml')\
          \ | from_yaml) ['resources'] }}"

    - name: verify data contents
      ansible.builtin.assert:
        that:
          - (subnet_resources | community.general.json_query("[?params.name == 'osm_subnet'].params.cidr")
            == ['192.168.20.0/24'])

    - ansible.builtin.include_role:
        name: os_migrate.os_migrate.import_subnets

- name: Security group tasks
  block:
    - vars:
        os_migrate_security_groups_filter:
          - regex: '^osm_'

      ansible.builtin.include_role:
        name: os_migrate.os_migrate.export_security_groups
    - name: load exported data
      ansible.builtin.set_fact:
        security_group_resources: "{{ (lookup('file', os_migrate_data_dir + '/security_groups.yml')\
          \ | from_yaml) ['resources'] }}"

    - name: verify data contents
      ansible.builtin.assert:
        that:
          - (security_group_resources | community.general.json_query("[?params.name == 'osm_security_group'].params.description")
            == ['OSM security group'])

    - ansible.builtin.include_role:
        name: os_migrate.os_migrate.import_security_groups

- name: Security group rules tasks
  block:
    - vars:
        os_migrate_security_groups_filter:
          - regex: '^osm_'

      ansible.builtin.include_role:
        name: os_migrate.os_migrate.export_security_group_rules
    - name: load exported data
      ansible.builtin.set_fact:
        security_group_rule_resources: "{{ (lookup('file', os_migrate_data_dir +\
          \ '/security_group_rules.yml') | from_yaml) ['resources'] }}"

    - name: verify data contents
      ansible.builtin.assert:
        that:
          - (security_group_rule_resources | community.general.json_query("[?params.security_group_ref.name
            == 'osm_security_group'].params.remote_ip_prefix") == ['0.0.0.0/0'])

    - ansible.builtin.include_role:
        name: os_migrate.os_migrate.import_security_group_rules

- name: Router tasks
  block:
    - vars:
      # This expression should export all osm_ workloads
      # skipping the universal conversion host (osm_uch)
      # which is used to move the VM's.
      # We create it on in seed.yml but we dont export it.
        os_migrate_routers_filter:
          - regex: '^osm_(?!uch)'

      ansible.builtin.include_role:
        name: os_migrate.os_migrate.export_routers
    - name: load exported data
      ansible.builtin.set_fact:
        router_resources: "{{ (lookup('file', os_migrate_data_dir + '/routers.yml')\
          \ | from_yaml) ['resources'] }}"

    - name: verify data contents
      ansible.builtin.assert:
        that:
          - "(router_resources | community.general.json_query(\"[?params.name == 'osm_router'].params.external_gateway_refinfo.network_ref.name\"\
            )) == [os_migrate_src_osm_router_external_network | default('public')]"

    - ansible.builtin.include_role:
        name: os_migrate.os_migrate.import_routers

- name: Router interface tasks
  block:
    - vars:
      # This expression should export all osm_ workloads
      # skipping the universal conversion host (osm_uch)
      # which is used to move the VM's.
      # We create it on in seed.yml but we dont export it.
        os_migrate_routers_filter:
          - regex: '^osm_(?!uch)'

      ansible.builtin.include_role:
        name: os_migrate.os_migrate.export_router_interfaces
    - name: load exported data
      ansible.builtin.set_fact:
        router_interface_resources: "{{ (lookup('file', os_migrate_data_dir + '/router_interfaces.yml')\
          \ | from_yaml) ['resources'] }}"

    - name: verify data contents
      ansible.builtin.assert:
        that:
          - "(router_interface_resources | community.general.json_query(\"[?params.device_ref.name\
            \ == 'osm_router'].params.fixed_ips_refs[].subnet_ref.name\")) | sort\
            \ == ['osm_subnet']"

    - ansible.builtin.include_role:
        name: os_migrate.os_migrate.import_router_interfaces

- name: Image tasks
  block:
    - vars:
        os_migrate_images_filter:
          - regex: '^osm_'

      ansible.builtin.include_role:
        name: os_migrate.os_migrate.export_images
    - name: load exported data
      ansible.builtin.set_fact:
        resources: "{{ (lookup('file', os_migrate_data_dir + '/images.yml') | from_yaml)\
          \ ['resources'] }}"

    - name: verify data contents
      ansible.builtin.assert:
        that:
          - (resources | community.general.json_query("[?params.name == 'osm_image'].params.min_ram")
            == [128])

    - ansible.builtin.include_role:
        name: os_migrate.os_migrate.import_images
