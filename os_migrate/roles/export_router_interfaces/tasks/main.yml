-   name: scan available routers
    register: src_routers_info

    ansible.builtin.os_migrate.os_migrate.os_routers_info:
      filters: "{{ os_migrate_src_filters }}"
      auth: "{{ os_migrate_src_auth }}"
      auth_type: "{{ os_migrate_src_auth_type|default(omit) }}"
      region_name: "{{ os_migrate_src_region_name|default(omit) }}"
      validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
      ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
      client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
      client_key: "{{ os_migrate_src_client_key|default(omit) }}"
-   name: create id-name pairs of routers to export
    ansible.builtin.set_fact:
      export_routers_ids_names: "{{ (src_routers_info.openstack_routers | community.general.json_query('[*].{name:\
        \ name, id: id}') | sort(attribute='id') ) }}"

-   name: filter names of routers to export
    ansible.builtin.set_fact:
      export_routers_ids_names: "{{ ( export_routers_ids_names | os_migrate.os_migrate.stringfilter(os_migrate_routers_filter,\
        \ attribute='name') ) }}"

-   name: export router interfaces
    loop: "{{ export_routers_ids_names }}"
    ansible.builtin.os_migrate.os_migrate.export_router_interfaces:
      auth: "{{ os_migrate_src_auth }}"
      auth_type: "{{ os_migrate_src_auth_type|default(omit) }}"
      region_name: "{{ os_migrate_src_region_name|default(omit) }}"
      path: "{{ os_migrate_data_dir }}/router_interfaces.yml"
      name: "{{ item['id'] }}"
      validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
      ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
      client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
      client_key: "{{ os_migrate_src_client_key|default(omit) }}"
