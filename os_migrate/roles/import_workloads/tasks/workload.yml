-   block:
    -   name: preliminary setup for workload import
        register: prelim

        ansible.builtin.os_migrate.os_migrate.import_workload_prelim:
          auth: "{{ os_migrate_dst_auth }}"
          auth_type: "{{ os_migrate_dst_auth_type|default(omit) }}"
          region_name: "{{ os_migrate_dst_region_name|default(omit) }}"
          validate_certs: "{{ os_migrate_dst_validate_certs|default(omit) }}"
          ca_cert: "{{ os_migrate_dst_ca_cert|default(omit) }}"
          client_cert: "{{ os_migrate_dst_client_cert|default(omit) }}"
          client_key: "{{ os_migrate_dst_client_key|default(omit) }}"
          dst_filters: "{{ os_migrate_dst_filters }}"
          src_conversion_host: "{{ os_src_conversion_host_info.openstack_conversion_host\
            \ }}"
          log_dir: "{{ os_migrate_data_dir }}/workload_logs"
          data: "{{ item }}"
    -   when: prelim.changed

        ansible.builtin.debug:
          msg:
          -   "{{ prelim.server_name }} log file: {{ prelim.log_file }}"
          -   "{{ prelim.server_name }} progress file: {{ prelim.state_file }}"
    -   name: perform required checks to ensure source workload is ready
        os_migrate.os_migrate.import_workload_source_check:
          auth: "{{ os_migrate_src_auth }}"
          auth_type: "{{ os_migrate_src_auth_type|default(omit) }}"
          region_name: "{{ os_migrate_src_region_name|default(omit) }}"
          validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
          ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
          client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
          client_key: "{{ os_migrate_src_client_key|default(omit) }}"
          name: "{{ item['_info']['id'] }}"
        when: prelim.changed

    -   name: expose source volumes
        register: exports
        when: prelim.changed

        ansible.builtin.os_migrate.os_migrate.import_workload_export_volumes:
          auth: "{{ os_migrate_src_auth }}"
          auth_type: "{{ os_migrate_src_auth_type|default(omit) }}"
          region_name: "{{ os_migrate_src_region_name|default(omit) }}"
          validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
          ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
          client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
          client_key: "{{ os_migrate_src_client_key|default(omit) }}"
          conversion_host: "{{ os_src_conversion_host_info.openstack_conversion_host\
            \ }}"
          data: "{{ item }}"
          log_file: "{{ prelim.log_file }}"
          state_file: "{{ prelim.state_file }}"
          ssh_key_path: "{{ os_migrate_conversion_keypair_private_path }}"
          ssh_user: "{{ os_migrate_conversion_host_ssh_user }}"
    -   name: transfer volumes to destination
        register: transfer
        when: prelim.changed

        ansible.builtin.os_migrate.os_migrate.import_workload_transfer_volumes:
          auth: "{{ os_migrate_dst_auth }}"
          auth_type: "{{ os_migrate_dst_auth_type|default(omit) }}"
          region_name: "{{ os_migrate_dst_region_name|default(omit) }}"
          validate_certs: "{{ os_migrate_dst_validate_certs|default(omit) }}"
          ca_cert: "{{ os_migrate_dst_ca_cert|default(omit) }}"
          client_cert: "{{ os_migrate_dst_client_cert|default(omit) }}"
          client_key: "{{ os_migrate_dst_client_key|default(omit) }}"
          data: "{{ item }}"
          conversion_host: "{{ os_dst_conversion_host_info.openstack_conversion_host\
            \ }}"
          ssh_key_path: "{{ os_migrate_conversion_keypair_private_path }}"
          ssh_user: "{{ os_migrate_conversion_host_ssh_user }}"
          transfer_uuid: "{{ exports.transfer_uuid }}"
          src_conversion_host_address: "{{ os_src_conversion_host_info.openstack_conversion_host.address\
            \ }}"
          volume_map: "{{ exports.volume_map }}"
          log_file: "{{ prelim.log_file }}"
          state_file: "{{ prelim.state_file }}"
    -   name: create destination instance
        register: os_migrate_destination_instance
        when: prelim.changed

        ansible.builtin.os_migrate.os_migrate.import_workload_create_instance:
          auth: "{{ os_migrate_dst_auth }}"
          auth_type: "{{ os_migrate_dst_auth_type|default(omit) }}"
          region_name: "{{ os_migrate_dst_region_name|default(omit) }}"
          validate_certs: "{{ os_migrate_dst_validate_certs|default(omit) }}"
          ca_cert: "{{ os_migrate_dst_ca_cert|default(omit) }}"
          client_cert: "{{ os_migrate_dst_client_cert|default(omit) }}"
          client_key: "{{ os_migrate_dst_client_key|default(omit) }}"
          data: "{{ item }}"
          block_device_mapping: "{{ transfer.block_device_mapping }}"
    -   name: clean up after migration
        when: prelim.changed

        ansible.builtin.os_migrate.os_migrate.import_workload_cleanup:
          auth: "{{ os_migrate_src_auth }}"
          auth_type: "{{ os_migrate_src_auth_type|default(omit) }}"
          region_name: "{{ os_migrate_src_region_name|default(omit) }}"
          validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
          ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
          client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
          client_key: "{{ os_migrate_src_client_key|default(omit) }}"
          data: "{{ item }}"
          conversion_host: "{{ os_src_conversion_host_info.openstack_conversion_host\
            \ }}"
          ssh_key_path: "{{ os_migrate_conversion_keypair_private_path }}"
          ssh_user: "{{ os_migrate_conversion_host_ssh_user }}"
          transfer_uuid: "{{ exports.transfer_uuid }}"
          volume_map: "{{ exports.volume_map }}"
          log_file: "{{ prelim.log_file }}"
          state_file: "{{ prelim.state_file }}"
    rescue:
    -   ansible.builtin.fail:
          msg: "Failed to import {{ item.params.name }}!"
